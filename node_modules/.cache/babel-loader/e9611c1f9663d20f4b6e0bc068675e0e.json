{"remainingRequest":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/views/Goods/Category.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/views/Goods/Category.vue","mtime":1573870081728},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/mac/Desktop/\\u4E0A\\u8BFE\\u6559\\u6750\\u8D44\\u6E90/vue\\u5546\\u57CE\\u9879\\u76EE/mall-admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/\\u4E0A\\u8BFE\\u6559\\u6750\\u8D44\\u6E90/vue\\u5546\\u57CE\\u9879\\u76EE/mall-admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Category } from '@/api/index';\nimport SingleUpload from '@/components/SingleUpload.vue';\nexport default {\n  components: {\n    SingleUpload: SingleUpload\n  },\n  data: function data() {\n    return {\n      defaultProps: {\n        label: 'name'\n      },\n      headers: {\n        Authorization: \"Bearer \".concat(sessionStorage.token)\n      },\n      EditModalVisible: false,\n      editForm: {\n        name: \"\",\n        pId: '',\n        img: ''\n      },\n      AddModalVisible: false,\n      addForm: {\n        name: \"\",\n        pId: '',\n        img: ''\n      },\n      currentNodeData: '',\n      currentNode: ''\n    };\n  },\n  methods: {\n    loadNode: function () {\n      var _loadNode = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(node, resolve) {\n        var _ref, _data, _ref2, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(node.level === 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return Category.load({\n                  pId: 0\n                });\n\n              case 3:\n                _ref = _context.sent;\n                _data = _ref.data;\n                return _context.abrupt(\"return\", resolve(_data));\n\n              case 6:\n                _context.next = 8;\n                return Category.load({\n                  pId: node.data.id\n                });\n\n              case 8:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                resolve(data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadNode(_x, _x2) {\n        return _loadNode.apply(this, arguments);\n      }\n\n      return loadNode;\n    }(),\n    // 打开编辑Modal\n    openEditModal: function openEditModal(node, data) {\n      this.EditModalVisible = true;\n      this.editForm = _objectSpread({}, data); // 转存node节点\n\n      this.currentNode = node;\n    },\n    // 更新节点\n    UpdateNodeHandle: function () {\n      var _UpdateNodeHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref3, status, msg;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Category.update(_objectSpread({}, this.editForm));\n\n              case 2:\n                _ref3 = _context2.sent;\n                status = _ref3.status;\n                msg = _ref3.msg;\n\n                if (status) {\n                  this.$message.success(msg);\n                  this.EditModalVisible = false; // 更新节点\n\n                  this.currentNode.data = _objectSpread({}, this.editForm);\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function UpdateNodeHandle() {\n        return _UpdateNodeHandle.apply(this, arguments);\n      }\n\n      return UpdateNodeHandle;\n    }(),\n    // 打开添加Modal获取pId\n    openAddModal: function openAddModal(node, data) {\n      this.addForm.pId = data.id;\n      this.AddModalVisible = true; // 转存data\n\n      this.currentNode = node;\n    },\n    // 确认添加节点\n    AddNodeHandle: function () {\n      var _AddNodeHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref4, status, msg, data;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Category.add(_objectSpread({}, this.addForm));\n\n              case 2:\n                _ref4 = _context3.sent;\n                status = _ref4.status;\n                msg = _ref4.msg;\n                data = _ref4.data;\n\n                if (status) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                this.$message.error(msg);\n                return _context3.abrupt(\"return\");\n\n              case 9:\n                this.$message.success(msg);\n                this.AddModalVisible = false; // 树形结构添加子节点\n\n                this.$refs.tree.append(_objectSpread({}, this.addForm, {}, data), this.currentNode); //清空表单\n\n                this.addForm = {\n                  name: \"\",\n                  pId: '',\n                  img: ''\n                };\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function AddNodeHandle() {\n        return _AddNodeHandle.apply(this, arguments);\n      }\n\n      return AddNodeHandle;\n    }(),\n    // 删除\n    openDeleteModal: function openDeleteModal(node, data) {\n      var _this = this;\n\n      this.$confirm('此操作将永久删除该分类, 是否继续?', {\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _ref6, status;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Category.remove({\n                  id: data.id\n                });\n\n              case 2:\n                _ref6 = _context4.sent;\n                status = _ref6.status;\n\n                if (status) {\n                  node.remove();\n\n                  _this.$message.success('删除成功!');\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))).catch(function () {\n        _this.$message.info('已取消删除');\n      });\n    }\n  }\n};",{"version":3,"sources":["Category.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div>\n\t\t<el-card class=\"box-card\">\n\t\t\t<div slot=\"header\" class=\"clearfix\">\n\t\t\t\t<span>商品分类</span>\n\t\t\t</div>\n\t\t\t<!-- 树形组件 -->\n\t\t\t<el-tree ref=\"tree\" :default-expanded-keys=\"[1]\" lazy node-key=\"id\" :load=\"loadNode\" :props=\"defaultProps\">\n\t\t\t\t<div class=\"node-box\" slot-scope=\"{ node, data }\">\n\t\t\t\t\t<span class=\"node-name\">{{ node.label }}</span>\n\t\t\t\t\t<span class=\"node-action\">\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-edit-outline\" size=\"mini\" :disabled=\"data.id==1\" @click.stop=\"openEditModal(node,data)\">\n\t\t\t\t\t\t\t编辑\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-plus\" size=\"mini\" @click.stop=\"openAddModal(node,data)\">\n\t\t\t\t\t\t\t添加\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-delete\" size=\"mini\" :disabled=\"data.id==1\" @click.stop=\"openDeleteModal(node,data)\">\n\t\t\t\t\t\t\t删除\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</el-tree>\n\t\t</el-card>\n\t\t<!-- 编辑Modal -->\n\t\t<el-dialog title=\"编辑节点\" :visible.sync=\"EditModalVisible\">\n\t\t\t<el-form label-width=\"80px\" :label-position=\"'left'\">\n\t\t\t\t<el-form-item label=\"名称\">\n\t\t\t\t\t<el-input v-model=\"editForm.name\" autocomplete=\"off\"></el-input>\n\t\t\t\t</el-form-item>\n\t\t\t\t<el-form-item label=\"图片\">\n\t\t\t\t\t<single-upload action=\"/api/upload/common/\" :url.sync=\"editForm.img\" />\n\t\t\t\t</el-form-item>\n\t\t\t</el-form>\n\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t<el-button @click=\"EditModalVisible = false\">取 消</el-button>\n\t\t\t\t<el-button type=\"primary\" @click=\"UpdateNodeHandle\">确 定</el-button>\n\t\t\t</div>\n\t\t</el-dialog>\n\t\t<!-- 添加Modal -->\n\t\t<el-dialog title=\"添加节点\" :visible.sync=\"AddModalVisible\">\n\t\t\t<el-form label-width=\"80px\" :label-position=\"'left'\">\n\t\t\t\t<el-form-item label=\"名称\">\n\t\t\t\t\t<el-input v-model=\"addForm.name\" autocomplete=\"off\"></el-input>\n\t\t\t\t</el-form-item>\n\t\t\t\t<el-form-item label=\"图片\">\n\t\t\t\t\t<single-upload action=\"/api/upload/common/\" :url.sync=\"addForm.img\" />\n\t\t\t\t</el-form-item>\n\t\t\t</el-form>\n\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t<el-button @click=\"AddModalVisible = false\">取 消</el-button>\n\t\t\t\t<el-button type=\"primary\" @click=\"AddNodeHandle\">确 定</el-button>\n\t\t\t</div>\n\t\t</el-dialog>\n\t</div>\n</template>\n\n<script>\n\timport { Category } from '@/api/index';\n\timport SingleUpload from '@/components/SingleUpload.vue';\n\texport default {\n\t\tcomponents: {\n\t\t\tSingleUpload\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tdefaultProps: {\n\t\t\t\t\tlabel: 'name',\n\t\t\t\t},\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${sessionStorage.token}`\n\t\t\t\t},\n\t\t\t\tEditModalVisible: false,\n\t\t\t\teditForm: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tpId: '',\n\t\t\t\t\timg: ''\n\t\t\t\t},\n\t\t\t\tAddModalVisible: false,\n\t\t\t\taddForm: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tpId: '',\n\t\t\t\t\timg: ''\n\t\t\t\t},\n\t\t\t\tcurrentNodeData: '',\n\t\t\t\tcurrentNode: '',\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\tasync loadNode(node, resolve) {\n\t\t\t\t// 根节点level==0\n\t\t\t\tif (node.level === 0) {\n\t\t\t\t\tlet { data } = await Category.load({ pId: 0 });\n\t\t\t\t\treturn resolve(data);\n\t\t\t\t}\n\t\t\t\tlet { data } = await Category.load({ pId: node.data.id });\n\t\t\t\tresolve(data);\n\t\t\t},\n\t\t\t// 打开编辑Modal\n\t\t\topenEditModal(node, data) {\n\t\t\t\tthis.EditModalVisible = true;\n\t\t\t\tthis.editForm = { ...data };\n\t\t\t\t// 转存node节点\n\t\t\t\tthis.currentNode = node;\n\t\t\t},\n\t\t\t// 更新节点\n\t\t\tasync UpdateNodeHandle() {\n\t\t\t\tlet { status, msg } = await Category.update({ ...this.editForm });\n\t\t\t\tif (status) {\n\t\t\t\t\tthis.$message.success(msg);\n\t\t\t\t\tthis.EditModalVisible = false;\n\t\t\t\t\t// 更新节点\n\t\t\t\t\tthis.currentNode.data = { ...this.editForm }\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 打开添加Modal获取pId\n\t\t\topenAddModal(node, data) {\n\t\t\t\tthis.addForm.pId = data.id;\n\t\t\t\tthis.AddModalVisible = true;\n\t\t\t\t// 转存data\n\t\t\t\tthis.currentNode = node;\n\t\t\t},\n\t\t\t// 确认添加节点\n\t\t\tasync AddNodeHandle() {\n\t\t\t\t// 1.表单验证\n\t\t\t\t// 2.发送数据\n\t\t\t\tlet { status, msg, data } = await Category.add({ ...this.addForm });\n\t\t\t\tif (!status) {\n\t\t\t\t\tthis.$message.error(msg);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.$message.success(msg);\n\t\t\t\tthis.AddModalVisible = false;\n\t\t\t\t// 树形结构添加子节点\n\t\t\t\tthis.$refs.tree.append({ ...this.addForm, ...data }, this.currentNode);\n\t\t\t\t//清空表单\n\t\t\t\tthis.addForm = { name: \"\", pId: '', img: '' };\n\t\t\t},\n\t\t\t// 删除\n\t\t\topenDeleteModal(node, data) {\n\t\t\t\tthis.$confirm('此操作将永久删除该分类, 是否继续?', {\n\t\t\t\t\t\ttype: 'warning',\n\t\t\t\t\t})\n\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\tlet { status } = await Category.remove({ id: data.id });\n\t\t\t\t\t\tif (status) {\n\t\t\t\t\t\t\tnode.remove();\n\t\t\t\t\t\t\tthis.$message.success('删除成功!');\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.$message.info('已取消删除');\n\t\t\t\t\t});\n\t\t\t},\n\t\t}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\t.node-box {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\n\t\t.node-name {\n\t\t\tfont-size: 14px;\n\t\t}\n\t}\n\n\t.photo-uploader {\n\t\t.el-upload {\n\t\t\tborder: 1px dashed #d9d9d9;\n\t\t\tborder-radius: 6px;\n\t\t\tcursor: pointer;\n\t\t\tposition: relative;\n\t\t\toverflow: hidden;\n\n\t\t\t&:hover {\n\t\t\t\tborder-color: #409EFF;\n\t\t\t}\n\n\t\t\t.photo-uploader-icon {\n\t\t\t\tfont-size: 28px;\n\t\t\t\tcolor: #8c939d;\n\t\t\t\twidth: 178px;\n\t\t\t\theight: 178px;\n\t\t\t\tline-height: 178px;\n\t\t\t\ttext-align: center;\n\t\t\t}\n\n\t\t\t.photo {\n\t\t\t\twidth: 178px;\n\t\t\t\theight: 178px;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\t}\n</style>\n"],"sourceRoot":"src/views/Goods"}]}