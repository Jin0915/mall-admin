{"remainingRequest":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/components/SingleUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/components/SingleUpload.vue","mtime":1573870081726},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/\\u4E0A\\u8BFE\\u6559\\u6750\\u8D44\\u6E90/vue\\u5546\\u57CE\\u9879\\u76EE/mall-admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// 支持双向数据绑定，采用:url.sync\n// 支持$emit事件success,处理复杂上传成功回调函数\nimport { Upload } from '@/api/index';\nexport default {\n  name: \"SingleUpload\",\n  props: {\n    url: {\n      type: String\n    },\n    defaultImage: {\n      type: String\n    },\n    action: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      headers: {\n        Authorization: \"Bearer \".concat(sessionStorage.token)\n      }\n    };\n  },\n  methods: {\n    // 上传图片之前的检查\n    beforeUpload: function beforeUpload(file) {\n      var reg = /^image\\/(jpe?g|png)$/;\n      var isImg = reg.test(file.type);\n      var isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isImg) {\n        this.$message.error('上传头像图片只能是 JPG/PNG 格式!');\n      }\n\n      if (!isLt2M) {\n        this.$message.error('上传头像图片大小不能超过 2MB!');\n      }\n\n      return isImg && isLt2M;\n    },\n    // 上传图片成功\n    uploadSuccess: function uploadSuccess(res, file) {\n      // 触发外部绑定的事件\n      this.$emit('success', res); // 双向数据绑定触发\n\n      this.$emit('update:url', res.src);\n    },\n    // 上传图片失败\n    uploadError: function uploadError(_ref, file, fileList) {\n      var status = _ref.status,\n          message = _ref.message;\n\n      switch (status) {\n        case 401:\n          this.$message.error(\"\\u9519\\u8BEF:401,Token\\u5931\\u6548,\\u8BF7\\u91CD\\u65B0\\u767B\\u5F55!\");\n          break;\n\n        case 400:\n          message = JSON.parse(message);\n          this.$message.error(\"\\u9519\\u8BEF:400,\".concat(message.msg));\n          break;\n\n        default:\n          this.$message.error(\"\\u9519\\u8BEF:\".concat(status, \",\").concat(message, \"!\"));\n          break;\n      }\n    },\n    // 删除现有图片\n    removeImage: function () {\n      var _removeImage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref2, status;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.url != this.defaultImage)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return Upload.remove({\n                  src: '.' + this.url\n                });\n\n              case 3:\n                _ref2 = _context.sent;\n                status = _ref2.status;\n\n                if (status) {\n                  this.$message.success('删除成功!');\n                }\n\n              case 6:\n                // 如果是默认头像，仅移除，不做物理删除\n                this.$emit('update:url', '');\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function removeImage() {\n        return _removeImage.apply(this, arguments);\n      }\n\n      return removeImage;\n    }()\n  }\n};",{"version":3,"sources":["SingleUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAYA;AACA;AACA,SAAA,MAAA,QAAA,aAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KAJA;AAOA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AAPA,GAFA;AAcA,EAAA,IAdA,kBAcA;AACA,WAAA;AACA,MAAA,OAAA,EAAA;AACA,QAAA,aAAA,mBAAA,cAAA,CAAA,KAAA;AADA;AADA,KAAA;AAKA,GApBA;AAqBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,YAFA,wBAEA,IAFA,EAEA;AACA,UAAA,GAAA,GAAA,sBAAA;AACA,UAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,GAAA,IAAA,GAAA,CAAA;;AACA,UAAA,CAAA,KAAA,EAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,uBAAA;AACA;;AACA,UAAA,CAAA,MAAA,EAAA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,mBAAA;AACA;;AACA,aAAA,KAAA,IAAA,MAAA;AACA,KAbA;AAcA;AACA,IAAA,aAfA,yBAeA,GAfA,EAeA,IAfA,EAeA;AACA;AACA,WAAA,KAAA,CAAA,SAAA,EAAA,GAAA,EAFA,CAGA;;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,GAAA,CAAA,GAAA;AACA,KApBA;AAqBA;AACA,IAAA,WAtBA,6BAsBA,IAtBA,EAsBA,QAtBA,EAsBA;AAAA,UAAA,MAAA,QAAA,MAAA;AAAA,UAAA,OAAA,QAAA,OAAA;;AACA,cAAA,MAAA;AACA,aAAA,GAAA;AACA,eAAA,QAAA,CAAA,KAAA;AACA;;AACA,aAAA,GAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA;AACA,eAAA,QAAA,CAAA,KAAA,4BAAA,OAAA,CAAA,GAAA;AACA;;AACA;AACA,eAAA,QAAA,CAAA,KAAA,wBAAA,MAAA,cAAA,OAAA;AACA;AAVA;AAYA,KAnCA;AAoCA;AACA,IAAA,WArCA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBAuCA,KAAA,GAAA,IAAA,KAAA,YAvCA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwCA,MAAA,CAAA,MAAA,CAAA;AAAA,kBAAA,GAAA,EAAA,MAAA,KAAA;AAAA,iBAAA,CAxCA;;AAAA;AAAA;AAwCA,gBAAA,MAxCA,SAwCA,MAxCA;;AAyCA,oBAAA,MAAA,EAAA;AACA,uBAAA,QAAA,CAAA,OAAA,CAAA,OAAA;AACA;;AA3CA;AA6CA;AACA,qBAAA,KAAA,CAAA,YAAA,EAAA,EAAA;;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AArBA,CAAA","sourcesContent":["<template>\n\t<el-upload class=\"avatar-uploader\" :action=\"action\" :headers=\"headers\" :show-file-list=\"false\" :on-success=\"uploadSuccess\"\n\t :on-error=\"uploadError\" :before-upload=\"beforeUpload\">\n\t\t<div v-if=\"url\" @click.stop=\"removeImage\" class=\"cover\">\n\t\t\t<i class=\"el-icon-delete avatar-uploader-icon\"></i>\n\t\t</div>\n\t\t<img v-if=\"url\" :src=\"url\" class=\"avatar\">\n\t\t<i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n\t</el-upload>\n</template>\n\n<script>\n\t// 支持双向数据绑定，采用:url.sync\n\t// 支持$emit事件success,处理复杂上传成功回调函数\n\timport { Upload } from '@/api/index';\n\n\texport default {\n\t\tname: \"SingleUpload\",\n\t\tprops: {\n\t\t\turl: {\n\t\t\t\ttype: String,\n\t\t\t},\n\t\t\tdefaultImage: {\n\t\t\t\ttype: String,\n\t\t\t},\n\t\t\taction: {\n\t\t\t\ttype: String,\n\t\t\t\trequired: true\n\t\t\t},\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${sessionStorage.token}`\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\t// 上传图片之前的检查\n\t\t\tbeforeUpload(file) {\n\t\t\t\tlet reg = /^image\\/(jpe?g|png)$/;\n\t\t\t\tconst isImg = reg.test(file.type);\n\t\t\t\tconst isLt2M = file.size / 1024 / 1024 < 2;\n\t\t\t\tif (!isImg) {\n\t\t\t\t\tthis.$message.error('上传头像图片只能是 JPG/PNG 格式!');\n\t\t\t\t}\n\t\t\t\tif (!isLt2M) {\n\t\t\t\t\tthis.$message.error('上传头像图片大小不能超过 2MB!');\n\t\t\t\t}\n\t\t\t\treturn isImg && isLt2M;\n\t\t\t},\n\t\t\t// 上传图片成功\n\t\t\tuploadSuccess(res, file) {\n\t\t\t\t// 触发外部绑定的事件\n\t\t\t\tthis.$emit('success', res);\n\t\t\t\t// 双向数据绑定触发\n\t\t\t\tthis.$emit('update:url', res.src);\n\t\t\t},\n\t\t\t// 上传图片失败\n\t\t\tuploadError({ status, message }, file, fileList) {\n\t\t\t\tswitch (status) {\n\t\t\t\t\tcase 401:\n\t\t\t\t\t\tthis.$message.error(`错误:401,Token失效,请重新登录!`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 400:\n\t\t\t\t\t\tmessage = JSON.parse(message);\n\t\t\t\t\t\tthis.$message.error(`错误:400,${message.msg}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.$message.error(`错误:${status},${message}!`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 删除现有图片\n\t\t\tasync removeImage() {\n\t\t\t\t// 如果不是默认头像，物理删除图片\n\t\t\t\tif (this.url != this.defaultImage) {\n\t\t\t\t\tlet { status } = await Upload.remove({ src: '.' + this.url });\n\t\t\t\t\tif (status) {\n\t\t\t\t\t\tthis.$message.success('删除成功!');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// 如果是默认头像，仅移除，不做物理删除\n\t\t\t\tthis.$emit('update:url', '');\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style lang=\"scss\">\n\t.avatar-uploader .el-upload {\n\t\tborder: 1px dashed #d9d9d9;\n\t\tborder-radius: 6px;\n\t\tcursor: pointer;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\n\t\t&:hover {\n\t\t\tborder-color: #409EFF;\n\t\t}\n\n\t\t.avatar-uploader-icon {\n\t\t\tfont-size: 28px;\n\t\t\tcolor: #8c939d;\n\t\t\twidth: 178px;\n\t\t\theight: 178px;\n\t\t\tline-height: 178px;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\t.cover {\n\t\t\tcontent: \"\";\n\t\t\tdisplay: block;\n\t\t\tfont-size: 14px;\n\t\t\tposition: absolute;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tz-index: 2;\n\t\t\tbackground-color: rgba(0, 0, 0, 0.7);\n\t\t\topacity: 0;\n\t\t\ttransition: all 0.5s;\n\n\t\t\t.el-icon-delete {\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t}\n\n\t\t&:hover .cover {\n\t\t\topacity: 1;\n\t\t}\n\n\t\t.avatar {\n\t\t\twidth: 178px;\n\t\t\theight: 178px;\n\t\t\tdisplay: block;\n\t\t}\n\t}\n</style>\n"],"sourceRoot":"src/components"}]}