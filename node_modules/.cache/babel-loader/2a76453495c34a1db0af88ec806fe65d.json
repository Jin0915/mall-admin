{"remainingRequest":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/views/Auth/Menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/src/views/Auth/Menu.vue","mtime":1573948834796},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mac/Desktop/上课教材资源/vue商城项目/mall-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/mac/Desktop/\\u4E0A\\u8BFE\\u6559\\u6750\\u8D44\\u6E90/vue\\u5546\\u57CE\\u9879\\u76EE/mall-admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/mac/Desktop/\\u4E0A\\u8BFE\\u6559\\u6750\\u8D44\\u6E90/vue\\u5546\\u57CE\\u9879\\u76EE/mall-admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Menu, Icon } from \"@/api/index\";\nexport default {\n  name: \"Menu\",\n  data: function data() {\n    return {\n      defaultProps: {\n        label: 'name'\n      },\n      // 选择图标\n      IconModalVisible: false,\n      icons: [],\n      pageSize: 30,\n      iconTotal: 0,\n      checkedIcon: '',\n      checkedIconName: '',\n      // 编辑Modal\n      EditModalVisible: false,\n      editForm: {\n        name: \"\",\n        pId: '',\n        path: '',\n        order: ''\n      },\n      // 添加Modal\n      AddModalVisible: false,\n      addForm: {\n        name: \"\",\n        pId: '',\n        path: '',\n        order: ''\n      },\n      currentNodeData: '',\n      currentNode: ''\n    };\n  },\n  created: function created() {\n    this.loadIcons(1);\n  },\n  methods: {\n    loadNode: function () {\n      var _loadNode = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(node, resolve) {\n        var _ref, _data, _ref2, data;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(node.level === 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return Menu.loadSub({\n                  pId: 0\n                });\n\n              case 3:\n                _ref = _context.sent;\n                _data = _ref.data;\n                return _context.abrupt(\"return\", resolve(_data));\n\n              case 6:\n                _context.next = 8;\n                return Menu.loadSub({\n                  pId: node.data.id\n                });\n\n              case 8:\n                _ref2 = _context.sent;\n                data = _ref2.data;\n                resolve(data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadNode(_x, _x2) {\n        return _loadNode.apply(this, arguments);\n      }\n\n      return loadNode;\n    }(),\n    // 加载element图标\n    loadIcons: function () {\n      var _loadIcons = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(pageIndex) {\n        var _ref3, status, icons, total;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Icon.list({\n                  pageSize: this.pageSize,\n                  pageIndex: pageIndex\n                });\n\n              case 2:\n                _ref3 = _context2.sent;\n                status = _ref3.status;\n                icons = _ref3.icons;\n                total = _ref3.total;\n\n                if (status) {\n                  icons.forEach(function (item) {\n                    // 添加选择状态--布尔值\n                    item.checked = false;\n                  });\n                  this.icons = icons;\n                  this.iconTotal = total;\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadIcons(_x3) {\n        return _loadIcons.apply(this, arguments);\n      }\n\n      return loadIcons;\n    }(),\n    // 打开图标选择Modal\n    openIconModal: function openIconModal(node, data) {\n      this.IconModalVisible = true; // 转存data\n\n      this.currentNodeData = data;\n    },\n    // 分页器改变页码数\n    currentPageChange: function currentPageChange(pageIndex) {\n      this.loadIcons(pageIndex);\n    },\n    // 选中图标\n    checkIcon: function checkIcon(data) {\n      this.icons.forEach(function (item) {\n        // 切换选中状态\n        item.checked = item == data ? !data.checked : false;\n      }); // 存储/取消选中的iconName\n\n      this.checkedIcon = data.checked ? data.id : '';\n      this.checkedIconName = data.checked ? data.name : '';\n    },\n    // 更新图标\n    UpdateIconHandle: function () {\n      var _UpdateIconHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref4, status, msg;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Menu.setIcon({\n                  id: this.currentNodeData.id,\n                  icon: this.checkedIcon\n                });\n\n              case 2:\n                _ref4 = _context3.sent;\n                status = _ref4.status;\n                msg = _ref4.msg;\n\n                if (status) {\n                  this.$message.success(msg);\n                  this.IconModalVisible = false; // 修改图标\n\n                  this.currentNodeData.icon = this.checkedIconName;\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function UpdateIconHandle() {\n        return _UpdateIconHandle.apply(this, arguments);\n      }\n\n      return UpdateIconHandle;\n    }(),\n    // 打开编辑Modal\n    openEditModal: function openEditModal(node, data) {\n      this.EditModalVisible = true;\n      this.editForm = _objectSpread({}, data); // 转存node节点\n\n      this.currentNode = node;\n    },\n    // 打开添加Modal获取pId\n    openAddModal: function openAddModal(node, data) {\n      this.addForm.pId = data.id;\n      this.AddModalVisible = true; // 转存data\n\n      this.currentNode = node;\n    },\n    // 删除节点\n    openDeleteModal: function openDeleteModal(node, data) {\n      var _this = this;\n\n      this.$confirm('此操作将永久删除该菜单, 是否继续?', {\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _ref6, status;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Menu.remove({\n                  id: data.id\n                });\n\n              case 2:\n                _ref6 = _context4.sent;\n                status = _ref6.status;\n\n                if (status) {\n                  node.remove();\n\n                  _this.$message.success('删除成功!');\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))).catch(function () {\n        _this.$message.info('已取消删除');\n      });\n    },\n    // 确认添加节点\n    AddNodeHandle: function () {\n      var _AddNodeHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var _ref7, status, msg, data;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Menu.add(_objectSpread({}, this.addForm));\n\n              case 2:\n                _ref7 = _context5.sent;\n                status = _ref7.status;\n                msg = _ref7.msg;\n                data = _ref7.data;\n\n                if (status) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                this.$message.error(msg);\n                return _context5.abrupt(\"return\", false);\n\n              case 9:\n                this.$message.success(msg);\n                this.AddModalVisible = false; // 树形结构添加子节点\n\n                this.$refs.tree.append(_objectSpread({}, this.addForm, {}, data), this.currentNode); //清空表单\n\n                this.addForm = {\n                  name: \"\",\n                  pId: '',\n                  path: ''\n                };\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function AddNodeHandle() {\n        return _AddNodeHandle.apply(this, arguments);\n      }\n\n      return AddNodeHandle;\n    }(),\n    // 更新节点\n    UpdateNodeHandle: function () {\n      var _UpdateNodeHandle = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var _ref8, status, msg;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return Menu.update(_objectSpread({}, this.editForm));\n\n              case 2:\n                _ref8 = _context6.sent;\n                status = _ref8.status;\n                msg = _ref8.msg;\n\n                if (status) {\n                  this.$message.success(msg);\n                  this.EditModalVisible = false; // 更新节点\n\n                  this.currentNode.data = _objectSpread({}, this.editForm);\n                }\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function UpdateNodeHandle() {\n        return _UpdateNodeHandle.apply(this, arguments);\n      }\n\n      return UpdateNodeHandle;\n    }()\n  }\n};",{"version":3,"sources":["Menu.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div>\n\t\t<el-card class=\"box-card\">\n\t\t\t<div slot=\"header\" class=\"clearfix\">\n\t\t\t\t<span>菜单权限</span>\n\t\t\t</div>\n\t\t\t<el-alert title=\"Tips\" type=\"warning\" description=\"设置后台管理系统的左侧菜单，目前至多支持两层菜单，三层以上菜单将不会显示。\" show-icon :closable=\"false\">\n\t\t\t</el-alert>\n\t\t\t<!-- 树形组件 -->\n\t\t\t<el-tree class=\"am-margin-top-lg\" ref=\"tree\" :default-expanded-keys=\"[1]\" lazy node-key=\"id\" :load=\"loadNode\" :props=\"defaultProps\">\n\t\t\t\t<div class=\"node-box\" slot-scope=\"{ node, data }\">\n\t\t\t\t\t<div class=\"node-name\">\n\t\t\t\t\t\t{{ node.label }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"node-action\">\n\t\t\t\t\t\t<el-popover placement=\"left\" class=\"am-margin-right-sm\" trigger=\"hover\">\n\t\t\t\t\t\t\t<i v-if=\"data.icon\" class=\"am-text-xxl\" :class=\"`el-icon-${data.icon}`\"></i>\n\t\t\t\t\t\t\t<div v-else class=\"am-text-xxl\">无</div>\n\t\t\t\t\t\t\t<el-button slot=\"reference\" type=\"text\" :icon=\"data.icon?`el-icon-${data.icon}`:''\" :disabled=\"data.id==1\"\n\t\t\t\t\t\t\t @click.stop=\"openIconModal(node,data)\">图标\n\t\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t</el-popover>\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-edit-outline\" :disabled=\"data.id==1\" @click.stop=\"openEditModal(node,data)\">编辑\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-plus\" @click.stop=\"openAddModal(node,data)\">添加\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t<el-button type=\"text\" icon=\"el-icon-delete\" :disabled=\"data.id==1\" @click.stop=\"openDeleteModal(node,data)\">删除\n\t\t\t\t\t\t</el-button>\n\t\t\t\t\t\t<div class=\"node-order am-margin-left-sm\">\n\t\t\t\t\t\t\t显示序号：<el-tag size=\"mini\">{{ data.order }}</el-tag>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</el-tree>\n\t\t\t<!-- 编辑Modal -->\n\t\t\t<el-dialog title=\"编辑节点\" :visible.sync=\"EditModalVisible\">\n\t\t\t\t<el-form label-width=\"80px\" :label-position=\"'left'\">\n\t\t\t\t\t<el-form-item label=\"菜单名称\">\n\t\t\t\t\t\t<el-input v-model=\"editForm.name\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"链接地址\">\n\t\t\t\t\t\t<el-input v-model=\"editForm.path\" placeholder=\"指定此菜单的链接地址，选填\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"显示顺序\">\n\t\t\t\t\t\t<el-input v-model=\"editForm.order\" placeholder=\"显示顺序按照数字从小到大，如2001\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t</el-form>\n\t\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t\t<el-button @click=\"EditModalVisible = false\">取 消</el-button>\n\t\t\t\t\t<el-button type=\"primary\" @click=\"UpdateNodeHandle\">确 定</el-button>\n\t\t\t\t</div>\n\t\t\t</el-dialog>\n\t\t\t<!-- 选择图标Modal -->\n\t\t\t<el-dialog title=\"选择图标\" width=\"72%\" :visible.sync=\"IconModalVisible\">\n\t\t\t\t<!-- 图标列表 -->\n\t\t\t\t<ul class=\"icon-list\">\n\t\t\t\t\t<li v-for=\"item in icons\" :key=\"item.id\" :class=\"{checked:item.checked}\" @click=\"checkIcon(item)\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<i :class=\"`el-icon-${item.name}`\"></i>\n\t\t\t\t\t\t\t<span class=\"icon-name\">el-icon-{{item.name}}</span>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\t<!-- 分页器 -->\n\t\t\t\t<el-pagination background layout=\"->,prev, pager, next\" :page-size=\"pageSize\" :total=\"iconTotal\" @current-change=\"currentPageChange\"></el-pagination>\n\n\t\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t\t<el-button @click=\"IconModalVisible = false\">取 消</el-button>\n\t\t\t\t\t<el-button type=\"primary\" @click=\"UpdateIconHandle\">确 定</el-button>\n\t\t\t\t</div>\n\t\t\t</el-dialog>\n\t\t\t<!-- 添加Modal -->\n\t\t\t<el-dialog title=\"添加节点\" :visible.sync=\"AddModalVisible\">\n\t\t\t\t<el-form label-width=\"80px\" :label-position=\"'left'\">\n\t\t\t\t\t<el-form-item label=\"菜单名称\">\n\t\t\t\t\t\t<el-input v-model=\"addForm.name\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"链接地址\">\n\t\t\t\t\t\t<el-input v-model=\"addForm.path\" placeholder=\"指定此菜单的链接地址，选填\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t\t<el-form-item label=\"显示顺序\">\n\t\t\t\t\t\t<el-input v-model=\"addForm.order\" placeholder=\"显示顺序按照数字从小到大，如2001\"></el-input>\n\t\t\t\t\t</el-form-item>\n\t\t\t\t</el-form>\n\t\t\t\t<div slot=\"footer\" class=\"dialog-footer\">\n\t\t\t\t\t<el-button @click=\"AddModalVisible = false\">取 消</el-button>\n\t\t\t\t\t<el-button type=\"primary\" @click=\"AddNodeHandle\">确 定</el-button>\n\t\t\t\t</div>\n\t\t\t</el-dialog>\n\t\t</el-card>\n\t</div>\n</template>\n\n<script>\n\timport { Menu, Icon } from \"@/api/index\";\n\n\texport default {\n\t\tname: \"Menu\",\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tdefaultProps: {\n\t\t\t\t\tlabel: 'name'\n\t\t\t\t},\n\t\t\t\t// 选择图标\n\t\t\t\tIconModalVisible: false,\n\t\t\t\ticons: [],\n\t\t\t\tpageSize: 30,\n\t\t\t\ticonTotal: 0,\n\t\t\t\tcheckedIcon: '',\n\t\t\t\tcheckedIconName: '',\n\t\t\t\t// 编辑Modal\n\t\t\t\tEditModalVisible: false,\n\t\t\t\teditForm: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tpId: '',\n\t\t\t\t\tpath: '',\n\t\t\t\t\torder: '',\n\t\t\t\t},\n\t\t\t\t// 添加Modal\n\t\t\t\tAddModalVisible: false,\n\t\t\t\taddForm: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tpId: '',\n\t\t\t\t\tpath: '',\n\t\t\t\t\torder: '',\n\t\t\t\t},\n\t\t\t\tcurrentNodeData: '',\n\t\t\t\tcurrentNode: '',\n\t\t\t}\n\t\t},\n\t\tcreated() {\n\t\t\tthis.loadIcons(1);\n\t\t},\n\t\tmethods: {\n\t\t\tasync loadNode(node, resolve) {\n\t\t\t\t// 根节点level==0\n\t\t\t\tif (node.level === 0) {\n\t\t\t\t\tlet { data } = await Menu.loadSub({ pId: 0 });\n\t\t\t\t\treturn resolve(data);\n\t\t\t\t}\n\t\t\t\tlet { data } = await Menu.loadSub({ pId: node.data.id });\n\t\t\t\tresolve(data);\n\t\t\t},\n\t\t\t// 加载element图标\n\t\t\tasync loadIcons(pageIndex) {\n\t\t\t\tlet { status, icons, total } = await Icon.list({ pageSize: this.pageSize, pageIndex });\n\t\t\t\tif (status) {\n\t\t\t\t\ticons.forEach((item) => {\n\t\t\t\t\t\t// 添加选择状态--布尔值\n\t\t\t\t\t\titem.checked = false;\n\t\t\t\t\t});\n\t\t\t\t\tthis.icons = icons;\n\t\t\t\t\tthis.iconTotal = total;\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 打开图标选择Modal\n\t\t\topenIconModal(node, data) {\n\t\t\t\tthis.IconModalVisible = true;\n\t\t\t\t// 转存data\n\t\t\t\tthis.currentNodeData = data;\n\t\t\t},\n\t\t\t// 分页器改变页码数\n\t\t\tcurrentPageChange(pageIndex) {\n\t\t\t\tthis.loadIcons(pageIndex);\n\t\t\t},\n\t\t\t// 选中图标\n\t\t\tcheckIcon(data) {\n\t\t\t\tthis.icons.forEach((item) => {\n\t\t\t\t\t// 切换选中状态\n\t\t\t\t\titem.checked = item == data ? !data.checked : false;\n\t\t\t\t});\n\t\t\t\t// 存储/取消选中的iconName\n\t\t\t\tthis.checkedIcon = data.checked ? data.id : '';\n\t\t\t\tthis.checkedIconName = data.checked ? data.name : '';\n\t\t\t},\n\t\t\t// 更新图标\n\t\t\tasync UpdateIconHandle() {\n\t\t\t\tlet { status, msg } = await Menu.setIcon({ id: this.currentNodeData.id, icon: this.checkedIcon });\n\t\t\t\tif (status) {\n\t\t\t\t\tthis.$message.success(msg);\n\t\t\t\t\tthis.IconModalVisible = false;\n\t\t\t\t\t// 修改图标\n\t\t\t\t\tthis.currentNodeData.icon = this.checkedIconName;\n\t\t\t\t}\n\t\t\t},\n\t\t\t// 打开编辑Modal\n\t\t\topenEditModal(node, data) {\n\t\t\t\tthis.EditModalVisible = true;\n\t\t\t\tthis.editForm = { ...data };\n\t\t\t\t// 转存node节点\n\t\t\t\tthis.currentNode = node;\n\t\t\t},\n\t\t\t// 打开添加Modal获取pId\n\t\t\topenAddModal(node, data) {\n\t\t\t\tthis.addForm.pId = data.id;\n\t\t\t\tthis.AddModalVisible = true;\n\t\t\t\t// 转存data\n\t\t\t\tthis.currentNode = node;\n\t\t\t},\n\t\t\t// 删除节点\n\t\t\topenDeleteModal(node, data) {\n\t\t\t\tthis.$confirm('此操作将永久删除该菜单, 是否继续?', {\n\t\t\t\t\t\ttype: 'warning',\n\t\t\t\t\t})\n\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\tlet { status } = await Menu.remove({ id: data.id });\n\t\t\t\t\t\tif (status) {\n\t\t\t\t\t\t\tnode.remove();\n\t\t\t\t\t\t\tthis.$message.success('删除成功!');\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthis.$message.info('已取消删除');\n\t\t\t\t\t});\n\t\t\t},\n\t\t\t// 确认添加节点\n\t\t\tasync AddNodeHandle() {\n\t\t\t\tlet { status, msg, data } = await Menu.add({ ...this.addForm });\n\t\t\t\tif (!status) {\n\t\t\t\t\tthis.$message.error(msg);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.$message.success(msg);\n\t\t\t\tthis.AddModalVisible = false;\n\t\t\t\t// 树形结构添加子节点\n\t\t\t\tthis.$refs.tree.append({ ...this.addForm, ...data }, this.currentNode);\n\t\t\t\t//清空表单\n\t\t\t\tthis.addForm = { name: \"\", pId: '', path: '' };\n\t\t\t},\n\t\t\t// 更新节点\n\t\t\tasync UpdateNodeHandle() {\n\t\t\t\tlet { status, msg } = await Menu.update({ ...this.editForm });\n\t\t\t\tif (status) {\n\t\t\t\t\tthis.$message.success(msg);\n\t\t\t\t\tthis.EditModalVisible = false;\n\t\t\t\t\t// 更新节点\n\t\t\t\t\tthis.currentNode.data = { ...this.editForm }\n\t\t\t\t}\n\t\t\t},\n\t\t}\n\t}\n</script>\n\n<style lang=\"scss\" scoped>\n\t.node-box {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tfont-size: 14px;\n\n\t\t.node-order {\n\t\t\twidth: 100px;\n\t\t\tdisplay: inline-block;\n\t\t\tfont-size: 12px;\n\t\t}\n\t}\n\n\tul.icon-list {\n\t\toverflow: hidden;\n\t\tlist-style: none;\n\t\tpadding: 0 !important;\n\t\tborder: solid 1px #eaeefb;\n\t\tborder-radius: 4px;\n\t}\n\n\t.icon-list li {\n\t\tfloat: left;\n\t\twidth: 10%;\n\t\ttext-align: center;\n\t\theight: 100px;\n\t\tline-height: 100px;\n\t\tcolor: #666;\n\t\tfont-size: 10px;\n\t\tborder-right: 1px solid #eee;\n\t\tborder-bottom: 1px solid #eee;\n\t\tmargin-right: -1px;\n\t\tmargin-bottom: -1px;\n\n\t\t&::after {\n\t\t\tdisplay: inline-block;\n\t\t\tcontent: \"\";\n\t\t\theight: 100%;\n\t\t\tvertical-align: middle;\n\t\t}\n\n\t\tspan {\n\t\t\tdisplay: inline-block;\n\t\t\tline-height: normal;\n\t\t\tvertical-align: middle;\n\t\t\tfont-family: \"Helvetica Neue\", Helvetica, \"PingFang SC\", \"Hiragino Sans GB\",\n\t\t\t\t\"Microsoft YaHei\", SimSun, sans-serif;\n\t\t\tcolor: #99a9bf;\n\t\t\ttransition: color 0.15s linear;\n\t\t}\n\n\t\ti {\n\t\t\tdisplay: block;\n\t\t\tfont-size: 26px;\n\t\t\tmargin-bottom: 15px;\n\t\t\tcolor: #606266;\n\t\t\ttransition: color 0.15s linear;\n\t\t}\n\n\t\t.icon-name {\n\t\t\tdisplay: inline-block;\n\t\t\tpadding: 0 3px;\n\t\t\theight: 1em;\n\t\t}\n\n\t\t&.checked,\n\t\t&.checked:hover {\n\t\t\tbackground-color: rgb(92, 182, 255);\n\n\t\t\tspan,\n\t\t\ti {\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t}\n\n\t\t&:hover {\n\n\t\t\tspan,\n\t\t\ti {\n\t\t\t\tcolor: rgb(92, 182, 255);\n\t\t\t}\n\t\t}\n\t}\n</style>\n"],"sourceRoot":"src/views/Auth"}]}